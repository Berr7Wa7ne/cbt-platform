generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int      @id @default(autoincrement())
  email    String   @unique
  password String
  roleId   Int
  name     String
  Answer   Answer[]
  role     Role     @relation(fields: [roleId], references: [id])
}

model Role {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  students Student[]
  users    User[]
}

model Student {
  id             Int             @id @default(autoincrement())
  name           String
  email          String          @unique
  department     String
  level          String
  password       String
  studentID      Int             @unique
  roleId         Int
  Answer         Answer[]
  Enrollment     Enrollment[]
  examAttempts   ExamAttempt[]
  passwordResets PasswordReset[]
  results        Result[]
  role           Role            @relation(fields: [roleId], references: [id])
  studentExams   StudentExam[]
}

model Enrollment {
  id             Int      @id @default(autoincrement())
  studentID      Int
  courseId       Int
  enrollmentDate DateTime @default(now())
  examID         String?
  course         Course   @relation(fields: [courseId], references: [id])
  Exam           Exam?    @relation(fields: [examID], references: [examID])
  student        Student  @relation(fields: [studentID], references: [id])

  @@unique([studentID, courseId])
}

model Course {
  id                Int          @id @default(autoincrement())
  courseCode        String       @unique
  courseTitle       String
  courseDescription String
  department        String
  credits           Int
  level             Int
  Enrollment        Enrollment[]
  exams             Exam[]
  questions         Question[]
  results           Result[]
}

model Exam {
  id           Int           @id @default(autoincrement())
  examID       String        @unique
  examTitle    String
  courseId     Int
  examDate     DateTime
  examTime     String
  duration     Int
  Answer       Answer[]
  Enrollment   Enrollment[]
  course       Course        @relation(fields: [courseId], references: [id])
  examAttempts ExamAttempt[]
  questions    Question[]
  results      Result[]
  studentExams StudentExam[]
}

model StudentExam {
  id          Int       @id @default(autoincrement())
  studentID   Int
  score       Int
  submitted   Boolean   @default(false)
  submittedAt DateTime?
  examID      String
  exam        Exam      @relation(fields: [examID], references: [examID])
  student     Student   @relation(fields: [studentID], references: [id])

  @@unique([studentID, examID])
}

model Question {
  id            Int      @id @default(autoincrement())
  courseId      Int
  questionID    String   @unique
  questionText  String
  questionType  String
  correctAnswer String
  examID        String
  options       String[]
  Answer        Answer[]
  course        Course   @relation(fields: [courseId], references: [id])
  exam          Exam     @relation(fields: [examID], references: [examID])
}

model Answer {
  id         Int      @id @default(autoincrement())
  studentID  Int
  examID     String
  questionID Int
  answer     String
  createdAt  DateTime @default(now())
  userId     Int?
  exam       Exam     @relation(fields: [examID], references: [examID])
  question   Question @relation(fields: [questionID], references: [id])
  student    Student  @relation(fields: [studentID], references: [id])
  User       User?    @relation(fields: [userId], references: [id])

  @@unique([studentID, examID, questionID])
}

model ExamAttempt {
  id          Int      @id @default(autoincrement())
  studentID   Int
  examID      String
  examDate    DateTime @default(now())
  totalScore  Int
  grade       String
  attemptDate DateTime @default(now())
  exam        Exam     @relation(fields: [examID], references: [examID])
  student     Student  @relation(fields: [studentID], references: [id])
  results     Result[]

  @@unique([studentID, examID])
}

model Result {
  id                Int         @id @default(autoincrement())
  courseId          Int
  grade             String
  studentID         Int
  examAttemptID     Int
  examID            String
  totalScore        Int
  courseTitle       String
  courseDescription String?
  credits           Int
  department        String
  examDate          DateTime
  examTitle         String
  level             Int
  studentName       String?
  course            Course      @relation(fields: [courseId], references: [id])
  examAttempt       ExamAttempt @relation(fields: [examAttemptID], references: [id])
  exam              Exam        @relation(fields: [examID], references: [examID])
  student           Student     @relation(fields: [studentID], references: [id])

  @@unique([studentID, examID, examAttemptID])
}

model PasswordReset {
  id        Int      @id @default(autoincrement())
  token     String
  createdAt DateTime @default(now())
  userId    Int
  student   Student  @relation(fields: [userId], references: [id])
}
